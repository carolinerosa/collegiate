-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema collegiate-final
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema collegiate-final
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `collegiate-final` DEFAULT CHARACTER SET utf8 ;
USE `collegiate-final` ;

-- -----------------------------------------------------
-- Table `collegiate-final`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `collegiate-final`.`usuario` (
  `matricula` INT(10) NOT NULL,
  `nome` VARCHAR(50) NOT NULL,
  `email` VARCHAR(50) NOT NULL,
  `credencial` ENUM('aluno', 'secretaria', 'coordenação') NOT NULL,
  `senha` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`matricula`),
  UNIQUE INDEX `matricula_UNIQUE` (`matricula` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `collegiate-final`.`estatisticas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `collegiate-final`.`estatisticas` (
  `codEst` INT NOT NULL AUTO_INCREMENT,
  `tipoRequisicao` VARCHAR(150) NOT NULL,
  `totalPedidos` INT NOT NULL,
  `pedidosAceitos` DOUBLE NOT NULL,
  PRIMARY KEY (`codEst`),
  UNIQUE INDEX `codEst_UNIQUE` (`codEst` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `collegiate-final`.`requisicao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `collegiate-final`.`requisicao` (
  `numRequi` INT NOT NULL AUTO_INCREMENT,
  `matricula` INT(10) NOT NULL,
  `codEst` INT NOT NULL,
  `justificativa` TEXT NOT NULL,
  `estado` ENUM('Deferido', 'Indeferido', 'Não votado', 'Em análise') NOT NULL DEFAULT 'Em análise',
  `dataPedido` DATE NOT NULL,
  `dataResposta` DATE NOT NULL,
  `historico` VARCHAR(100) NOT NULL,
  `cartaOrientador` VARCHAR(100) NULL,
  PRIMARY KEY (`numRequi`),
  UNIQUE INDEX `idrequisicao_UNIQUE` (`numRequi` ASC),
  INDEX `codEst_idx` (`codEst` ASC),
  INDEX `matricula_idx` (`matricula` ASC),
  CONSTRAINT `codEst`
    FOREIGN KEY (`codEst`)
    REFERENCES `collegiate-final`.`estatisticas` (`codEst`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `matricula`
    FOREIGN KEY (`matricula`)
    REFERENCES `collegiate-final`.`usuario` (`matricula`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `collegiate-final`;

DELIMITER $$
USE `collegiate-final`$$
CREATE DEFINER = CURRENT_USER TRIGGER `collegiate-final`.`requisicao_AFTER_INSERT` AFTER INSERT ON `requisicao` FOR EACH ROW
BEGIN

declare codigo, valor, cod, posit, total int;
declare positivo cursor for select codEst, count(*) from requisicao where requisicao.estado = 'Deferido' group by codEst;
declare dados cursor for select codEst, count(*) from requisicao group by codEst;
declare somatorio cursor for select count(*) from requisicao where requisicao.estado = 'Deferido';

open somatorio;
fetch somatorio into total;
close somatorio;

open dados;
while dados%notfound do
	fetch dados into codigo, valor;
    update estatistica set totalPedidos = valor where estatistica.codEst = codigo;
END while;
close dados;

open positivo;
while positivo%notfound do
	fetch positivo into cod, posit;
    update estatistica set pedidosAceitos = (posit/total) where estatistica.codEst = cod;
end while;
close positivo;

END$$

USE `collegiate-final`$$
CREATE DEFINER = CURRENT_USER TRIGGER `collegiate-final`.`requisicao_AFTER_DELETE` AFTER DELETE ON `requisicao` FOR EACH ROW
BEGIN

declare codigo, valor, cod, posit, total int;
declare positivo cursor for select codEst, count(*) from requisicao where requisicao.estado = 'Deferido' group by codEst;
declare dados cursor for select codEst, count(*) from requisicao group by codEst;
declare somatorio cursor for select count(*) from requisicao where requisicao.estado = 'Deferido';

open somatorio;
fetch somatorio into total;
close somatorio;

open dados;
while dados%notfound do
	fetch dados into codigo, valor;
    update estatistica set totalPedidos = valor where estatistica.codEst = codigo;
END while;
close dados;

open positivo;
while positivo%notfound do
	fetch positivo into cod, posit;
    update estatistica set pedidosAceitos = (posit/total) where estatistica.codEst = cod;
end while;
close positivo;

END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
